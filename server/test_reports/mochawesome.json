{
  "stats": {
    "suites": 6,
    "tests": 43,
    "passes": 43,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-29T05:57:35.005Z",
    "end": "2024-11-29T05:57:35.039Z",
    "duration": 34,
    "testsRegistered": 43,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7718945c-4bde-4f0e-9047-b521e6aa42d1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1831dc8f-65ce-4dfc-a75f-de65c1dbd583",
          "title": "UnitTest APP: Middlewares",
          "fullFile": "/workspaces/DACN-HK-232/server/tests/unit/app/middleware.test.js",
          "file": "/tests/unit/app/middleware.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MDW1-1_IsAdmin_401_RequireAdminRole",
              "fullTitle": "UnitTest APP: Middlewares MDW1-1_IsAdmin_401_RequireAdminRole",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n// Data prep\nchai.expect(mock?.user?.role, \"Role Should Not Be Null\").to.be.a(\"string\");\nawait GenericController.testFailMiddleware(\n    mock, match,\n    appAuthMilddewares.isAdmin\n);",
              "err": {},
              "uuid": "ddb3557e-3ee9-41ff-ad29-61261ecb026c",
              "parentUUID": "1831dc8f-65ce-4dfc-a75f-de65c1dbd583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MDW1-2_IsAdmin_200_AdminSuccess",
              "fullTitle": "UnitTest APP: Middlewares MDW1-2_IsAdmin_200_AdminSuccess",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n// Data prep\nchai.expect(mock?.user?.role, \"Role Should Not Be Null\").to.be.a(\"string\");\nawait GenericController.testSuccessMiddleware(\n    mock, match,\n    appAuthMilddewares.isAdmin\n);",
              "err": {},
              "uuid": "904ca20d-ef17-49e3-8c41-1b18f4e31675",
              "parentUUID": "1831dc8f-65ce-4dfc-a75f-de65c1dbd583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MDW2-1_VerifyAccessToken_401_RequireAuthentication",
              "fullTitle": "UnitTest APP: Middlewares MDW2-1_VerifyAccessToken_401_RequireAuthentication",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  // Data prep\n  chai.expect(match.jwtData, \"JWT Data must be available to encode.\").to.be.an(\"object\");\n  chai.expect(mock?.headers?.authorization).to.be.a(\"string\");\n  const accessToken = jwt.sign(match.jwtData, \"jsdi910u92w8209iw2u1932183902091is92010\", {expiresIn: match.jwtData.expiresIn});\n  chai.expect(accessToken).to.be.a(\"string\");\n  mock.headers.authorization += accessToken;\n  // console.log(\"11111\", mock, \"1111\");\n  // console.log(\"22222\", match, \"2222\");\n  await GenericController.testFailMiddleware(\n      mock, match,\n      appAuthMilddewares.verifyAccessToken\n  );\n  // chai.expect(mock.user,\n  //     \"After Middleware User Data Should Present\")\n  //     .to.be.an(\"object\");\n  // matchRecursiveObjects(mock.user, match.jwtData);",
              "err": {},
              "uuid": "f4a48b91-3699-43a7-be55-d76caed69d06",
              "parentUUID": "1831dc8f-65ce-4dfc-a75f-de65c1dbd583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MDW2-2_VerifyAccessToken_400_InvalidToken",
              "fullTitle": "UnitTest APP: Middlewares MDW2-2_VerifyAccessToken_400_InvalidToken",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  // Data prep\n  chai.expect(match.jwtData, \"JWT Data must be available to encode.\").to.be.an(\"object\");\n  chai.expect(mock?.headers?.authorization).to.be.a(\"string\");\n  \n  const accessToken = jwt.sign(match.jwtData, \"jsdi910u92w8209iw2u1932183902091is92010\", {expiresIn: match.jwtData.expiresIn});\n  chai.expect(accessToken).to.be.a(\"string\");\n  \n  mock.headers.authorization += accessToken;\n  \n  // console.log(\"11111\", mock, \"1111\");\n  // console.log(\"22222\", match, \"2222\");\n  \n  await GenericController.testFailMiddleware(\n      mock, match,\n      appAuthMilddewares.verifyAccessToken\n  );",
              "err": {},
              "uuid": "3171ebeb-7fce-4ed7-9f08-8255bf3de70b",
              "parentUUID": "1831dc8f-65ce-4dfc-a75f-de65c1dbd583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MDW2-3_VerifyAccessToken_200_Success",
              "fullTitle": "UnitTest APP: Middlewares MDW2-3_VerifyAccessToken_200_Success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  // Data prep\n  chai.expect(match.jwtData, \"JWT Data must be available to encode.\").to.be.an(\"object\");\n  chai.expect(mock?.headers?.authorization).to.be.a(\"string\");\n  \n  const accessToken = jwt.sign(match.jwtData, \"jsdi910u92w8209iw2u1932183902091is92010\", {expiresIn: match.jwtData.expiresIn});\n  chai.expect(accessToken).to.be.a(\"string\");\n  \n  mock.headers.authorization += accessToken;\n  \n  // console.log(\"11111\", mock, \"1111\");\n  // console.log(\"22222\", match, \"2222\");\n  \n  const resp = await GenericController.testFailMiddleware(\n      mock, match,\n      appAuthMilddewares.verifyAccessToken\n  );\n  \n  chai.expect(resp.user,\n      \"After Middleware User Data Should Not Present\")\n      .to.be.undefined;\n  \n  // matchRecursiveObjects(resp.user, match.jwtData);",
              "err": {},
              "uuid": "eac2f4fa-22e0-4d5e-b33b-a0a5528045d2",
              "parentUUID": "1831dc8f-65ce-4dfc-a75f-de65c1dbd583",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ddb3557e-3ee9-41ff-ad29-61261ecb026c",
            "904ca20d-ef17-49e3-8c41-1b18f4e31675",
            "f4a48b91-3699-43a7-be55-d76caed69d06",
            "3171ebeb-7fce-4ed7-9f08-8255bf3de70b",
            "eac2f4fa-22e0-4d5e-b33b-a0a5528045d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
          "title": "UnitTest BLOG: Controller",
          "fullFile": "/workspaces/DACN-HK-232/server/tests/unit/blog/controller.test.js",
          "file": "/tests/unit/blog/controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "BL2-1_POST_/api/blog/_200_CreateSuccess",
              "fullTitle": "UnitTest BLOG: Controller BL2-1_POST_/api/blog/_200_CreateSuccess",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  blogsAPIControllers.createNewBlogPost\n);",
              "err": {},
              "uuid": "547cc0e9-0345-45b1-b71f-cb73d41a34e1",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-2_POST_/api/blog/_400_MissingInput",
              "fullTitle": "UnitTest BLOG: Controller BL2-2_POST_/api/blog/_400_MissingInput",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  blogsAPIControllers.createNewBlogPost\n);",
              "err": {},
              "uuid": "9db280d7-fc57-45d8-b214-1d87b0f5ce3b",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-3_PUT_/upload_image/:bid_200_UploadImageSuccess",
              "fullTitle": "UnitTest BLOG: Controller BL2-3_PUT_/upload_image/:bid_200_UploadImageSuccess",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testSuccess(\n  mock, match,\n  blogsAPIControllers.uploadImage\n);",
              "err": {},
              "uuid": "a98ecc6e-571d-45e1-89a9-7159b5b7c4ae",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-4_PUT_/api/blog/:bid_200_UpdateError",
              "fullTitle": "UnitTest BLOG: Controller BL2-4_PUT_/api/blog/:bid_200_UpdateError",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  blogsAPIControllers.updateBlog\n);",
              "err": {},
              "uuid": "c81b2bd3-ca60-4ff4-ac85-1e37b971dd08",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-5_POST_/api/blog/like_200_LikeSuccess",
              "fullTitle": "UnitTest BLOG: Controller BL2-5_POST_/api/blog/like_200_LikeSuccess",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testSuccess(\n  mock, match,\n  blogsAPIControllers.likeBlog\n);",
              "err": {},
              "uuid": "9a41fbc3-affb-4e28-9a20-77822e50663b",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-6_POST_/api/blog/like_400_LikeThrowError",
              "fullTitle": "UnitTest BLOG: Controller BL2-6_POST_/api/blog/like_400_LikeThrowError",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  blogsAPIControllers.likeBlog\n);",
              "err": {},
              "uuid": "1ec60920-8aa4-42ce-ad7e-629d6634d51f",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-7_POST_/api/blog/dislike_200_DislikeSuccess",
              "fullTitle": "UnitTest BLOG: Controller BL2-7_POST_/api/blog/dislike_200_DislikeSuccess",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testSuccess(\n  mock, match,\n  blogsAPIControllers.dislikeBlog\n);",
              "err": {},
              "uuid": "7f72a415-6e8a-425b-bcb6-9b26f338b3dd",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-8_POST_/api/blog/dislike_400_DislikeThrowError",
              "fullTitle": "UnitTest BLOG: Controller BL2-8_POST_/api/blog/dislike_400_DislikeThrowError",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  blogsAPIControllers.likeBlog\n);",
              "err": {},
              "uuid": "e975abd9-a9f7-49c3-90f5-fdbf90dc3674",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BL2-9_POST_/api/blog/top_tags_200_GetTopTagsSuccess",
              "fullTitle": "UnitTest BLOG: Controller BL2-9_POST_/api/blog/top_tags_200_GetTopTagsSuccess",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  blogsAPIControllers.getTopTags\n);",
              "err": {},
              "uuid": "f926dc41-8bb6-449c-b8bb-7b9bfcea65d8",
              "parentUUID": "6af509cb-bfa3-47bd-882b-8b5bfbd018b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "547cc0e9-0345-45b1-b71f-cb73d41a34e1",
            "9db280d7-fc57-45d8-b214-1d87b0f5ce3b",
            "a98ecc6e-571d-45e1-89a9-7159b5b7c4ae",
            "c81b2bd3-ca60-4ff4-ac85-1e37b971dd08",
            "9a41fbc3-affb-4e28-9a20-77822e50663b",
            "1ec60920-8aa4-42ce-ad7e-629d6634d51f",
            "7f72a415-6e8a-425b-bcb6-9b26f338b3dd",
            "e975abd9-a9f7-49c3-90f5-fdbf90dc3674",
            "f926dc41-8bb6-449c-b8bb-7b9bfcea65d8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b2a5fd04-cc5c-4d4b-a498-e19a171f3f07",
          "title": "UnitTest ORDER: Controller",
          "fullFile": "/workspaces/DACN-HK-232/server/tests/unit/order/controller.test.js",
          "file": "/tests/unit/order/controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ORD-1_POST_/api/order/_400_CreateOrderMissingInput",
              "fullTitle": "UnitTest ORDER: Controller ORD-1_POST_/api/order/_400_CreateOrderMissingInput",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  orderAPIControllers.createNewOrder\n);",
              "err": {},
              "uuid": "94919ec4-7801-4eac-bdd9-c50812d4becc",
              "parentUUID": "b2a5fd04-cc5c-4d4b-a498-e19a171f3f07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ORD-2_POST_/api/order/_400_MissingInput2",
              "fullTitle": "UnitTest ORDER: Controller ORD-2_POST_/api/order/_400_MissingInput2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  orderAPIControllers.createNewOrder\n);",
              "err": {},
              "uuid": "aad12b16-3068-4ec0-851e-b420a19c388d",
              "parentUUID": "b2a5fd04-cc5c-4d4b-a498-e19a171f3f07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ORD-3_PUT_/order/update_status/:bid_404_UpdateStatusNoExist",
              "fullTitle": "UnitTest ORDER: Controller ORD-3_PUT_/order/update_status/:bid_404_UpdateStatusNoExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  orderAPIControllers.createNewOrder\n);",
              "err": {},
              "uuid": "c6af2b30-b4a4-401e-bb96-fc346a9839c2",
              "parentUUID": "b2a5fd04-cc5c-4d4b-a498-e19a171f3f07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ORD-4_PUT_/api/order/_GetUserOrderNotExist",
              "fullTitle": "UnitTest ORDER: Controller ORD-4_PUT_/api/order/_GetUserOrderNotExist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  orderAPIControllers.getUserOrder\n);",
              "err": {},
              "uuid": "2c4222dd-80ab-438a-9e54-71b1d10c65b3",
              "parentUUID": "b2a5fd04-cc5c-4d4b-a498-e19a171f3f07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ORD-5_POST_/api/order/_200_GetOrdersByAdminFail",
              "fullTitle": "UnitTest ORDER: Controller ORD-5_POST_/api/order/_200_GetOrdersByAdminFail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  orderAPIControllers.getOrdersByAdmin\n);",
              "err": {},
              "uuid": "284502a7-afb1-4653-ace2-480ee12e65b2",
              "parentUUID": "b2a5fd04-cc5c-4d4b-a498-e19a171f3f07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ORD-6_POST_/api/order/staff_calendar_400_getOrdersForStaffCalendarError",
              "fullTitle": "UnitTest ORDER: Controller ORD-6_POST_/api/order/staff_calendar_400_getOrdersForStaffCalendarError",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  orderAPIControllers.likeBlog\n);",
              "err": {},
              "uuid": "5f8df022-52cc-462b-9240-54f3380ba391",
              "parentUUID": "b2a5fd04-cc5c-4d4b-a498-e19a171f3f07",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94919ec4-7801-4eac-bdd9-c50812d4becc",
            "aad12b16-3068-4ec0-851e-b420a19c388d",
            "c6af2b30-b4a4-401e-bb96-fc346a9839c2",
            "2c4222dd-80ab-438a-9e54-71b1d10c65b3",
            "284502a7-afb1-4653-ace2-480ee12e65b2",
            "5f8df022-52cc-462b-9240-54f3380ba391"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
          "title": "UnitTest PROVIDER: Controller",
          "fullFile": "/workspaces/DACN-HK-232/server/tests/unit/provider/controller.test.js",
          "file": "/tests/unit/provider/controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "PRVD1-1_POST_/api/service_provider_200_CreateProviderMissingInput",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD1-1_POST_/api/service_provider_200_CreateProviderMissingInput",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testFail(\n  mock, match,\n  providerAPIControllers.createServiceProvider\n);",
              "err": {},
              "uuid": "7bd0d1d4-ad20-4789-ae93-c3a3fae7896b",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD1-2_POST_/api/service_provider_200_CreateProviderSuccess",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD1-2_POST_/api/service_provider_200_CreateProviderSuccess",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testFail(\n    mock, match,\n    providerAPIControllers.createServiceProvider\n);",
              "err": {},
              "uuid": "bae301f6-3467-4b8c-b59a-6cd779f96287",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD1-3_POST_/api/service_provider_400_CreateProviderAlreadyExist",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD1-3_POST_/api/service_provider_400_CreateProviderAlreadyExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testFail(\n    mock, match,\n    providerAPIControllers.createServiceProvider\n);",
              "err": {},
              "uuid": "cb8b2706-b005-45a0-870c-e7b1a5737ecf",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD2-1_GET_/api/service_provider_200_GetAllProviderTimeout",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD2-1_GET_/api/service_provider_200_GetAllProviderTimeout",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  providerAPIControllers.getAllServiceProvider\n);",
              "err": {},
              "uuid": "16d471d8-ef44-44ad-9209-f62b4d8902bd",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD2-2_GET_/api/service_provider_400_GetNoProvider",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD2-2_GET_/api/service_provider_400_GetNoProvider",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  providerAPIControllers.getAllServiceProvider\n);",
              "err": {},
              "uuid": "fa3144e6-127a-49ae-8a89-c12a4d016840",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD3-1_DELETE_/api/service_provider_400_DeleteNonExistProvider",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD3-1_DELETE_/api/service_provider_400_DeleteNonExistProvider",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  \nawait GenericController.testError(\n  mock, match,\n  providerAPIControllers.deleteServiceProvider\n);",
              "err": {},
              "uuid": "22c47e1c-6f14-41bb-89a7-def80ccadd44",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD3-2_DELETE_/api/service_provider_400_MissingInput",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD3-2_DELETE_/api/service_provider_400_MissingInput",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  \nawait GenericController.testError(\n  mock, match,\n  providerAPIControllers.deleteServiceProvider\n);",
              "err": {},
              "uuid": "2ab7ee4a-d897-4078-a34a-5407483bbc34",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD4-1_GET_/api/service_provider/owner_400_MissingInput",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD4-1_GET_/api/service_provider/owner_400_MissingInput",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  \nawait GenericController.testError(\n  mock, match,\n  providerAPIControllers.getServiceProviderByOwnerId\n);",
              "err": {},
              "uuid": "dd129329-e53e-4e63-bde5-3381a2afa3c1",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PRVD4-2_GET_/api/service_provider/owner_400_GetProviderByNonExistOwner",
              "fullTitle": "UnitTest PROVIDER: Controller PRVD4-2_GET_/api/service_provider/owner_400_GetProviderByNonExistOwner",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  providerAPIControllers.getServiceProviderByOwnerId\n);",
              "err": {},
              "uuid": "1c9bc9cb-6132-4db2-a468-d2779f8ea260",
              "parentUUID": "07f32fea-c005-4716-aa5a-b85e58aa0b82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7bd0d1d4-ad20-4789-ae93-c3a3fae7896b",
            "bae301f6-3467-4b8c-b59a-6cd779f96287",
            "cb8b2706-b005-45a0-870c-e7b1a5737ecf",
            "16d471d8-ef44-44ad-9209-f62b4d8902bd",
            "fa3144e6-127a-49ae-8a89-c12a4d016840",
            "22c47e1c-6f14-41bb-89a7-def80ccadd44",
            "2ab7ee4a-d897-4078-a34a-5407483bbc34",
            "dd129329-e53e-4e63-bde5-3381a2afa3c1",
            "1c9bc9cb-6132-4db2-a468-d2779f8ea260"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e364ebd-7e1e-458f-a7f9-33bf08911f0c",
          "title": "UnitTest STAFF: Controller",
          "fullFile": "/workspaces/DACN-HK-232/server/tests/unit/staff/controller.test.js",
          "file": "/tests/unit/staff/controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "STFF1-1_POST_/api/staff_200_AddStaffMissingInput",
              "fullTitle": "UnitTest STAFF: Controller STFF1-1_POST_/api/staff_200_AddStaffMissingInput",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  staffAPIControllers.addStaff\n);",
              "err": {},
              "uuid": "dc0c3d48-3d19-44d6-abc9-5da2c6069c04",
              "parentUUID": "8e364ebd-7e1e-458f-a7f9-33bf08911f0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "STFF1-2_POST_/api/staff_200_AddStaffTimeout",
              "fullTitle": "UnitTest STAFF: Controller STFF1-2_POST_/api/staff_200_AddStaffTimeout",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n    mock, match,\n    staffAPIControllers.addStaff\n);",
              "err": {},
              "uuid": "ae172588-9b87-4797-bf41-a492f527e5f9",
              "parentUUID": "8e364ebd-7e1e-458f-a7f9-33bf08911f0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "STFF1-3_POST_/api/staff_400_AddStaffAlreadyExist",
              "fullTitle": "UnitTest STAFF: Controller STFF1-3_POST_/api/staff_400_AddStaffAlreadyExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n    mock, match,\n    staffAPIControllers.addStaff\n);",
              "err": {},
              "uuid": "88fee03a-2a56-4c0e-8728-2da3d0da954b",
              "parentUUID": "8e364ebd-7e1e-458f-a7f9-33bf08911f0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "STFF2-1_GET_/api/staff_200_GetAllStaffsByProviderOK",
              "fullTitle": "UnitTest STAFF: Controller STFF2-1_GET_/api/staff_200_GetAllStaffsByProviderOK",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n// console.log(mock, match);\nlet resp = await GenericController.testError(\n  mock, match,\n  staffAPIControllers.getAllStaffsByAdmin\n);\n// console.log('============>' + JSON.stringify(resp));\\\nchai.expect(resp.ok).to.be.true;\nchai.expect(resp.msg).to.be.equal('Behavior matched');",
              "err": {},
              "uuid": "bba45866-0f13-4459-a00b-5f4155239f49",
              "parentUUID": "8e364ebd-7e1e-458f-a7f9-33bf08911f0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "STFF2-2_GET_/api/staff_400_MissingProviderInput",
              "fullTitle": "UnitTest STAFF: Controller STFF2-2_GET_/api/staff_400_MissingProviderInput",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  staffAPIControllers.getAllStaffsByAdmin\n);",
              "err": {},
              "uuid": "0cdaeba0-928d-4ffd-ae8e-8d468215f822",
              "parentUUID": "8e364ebd-7e1e-458f-a7f9-33bf08911f0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc0c3d48-3d19-44d6-abc9-5da2c6069c04",
            "ae172588-9b87-4797-bf41-a492f527e5f9",
            "88fee03a-2a56-4c0e-8728-2da3d0da954b",
            "bba45866-0f13-4459-a00b-5f4155239f49",
            "0cdaeba0-928d-4ffd-ae8e-8d468215f822"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
          "title": "UnitTest USER: Controller",
          "fullFile": "/workspaces/DACN-HK-232/server/tests/unit/user/controller.test.js",
          "file": "/tests/unit/user/controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "USR1-1_POST_/api/user/register_200_RegisterAdminSuccess",
              "fullTitle": "UnitTest USER: Controller USR1-1_POST_/api/user/register_200_RegisterAdminSuccess",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  servicesAPIControllers.register\n);",
              "err": {},
              "uuid": "c9b6cdda-cee6-4253-bcaa-166bc394da01",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR1-2_POST_/api/user/register_400_UserAlreadyExist",
              "fullTitle": "UnitTest USER: Controller USR1-2_POST_/api/user/register_400_UserAlreadyExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  servicesAPIControllers.createService\n);",
              "err": {},
              "uuid": "fe233495-6e53-471a-af36-1cc9425b75b8",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR1-3_POST_/api/user/register_400_MissingInputError",
              "fullTitle": "UnitTest USER: Controller USR1-3_POST_/api/user/register_400_MissingInputError",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testFail(\n  mock, match,\n  servicesAPIControllers.register\n);",
              "err": {},
              "uuid": "af94757d-0c1f-4e37-86c2-99de22bbd8ab",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR2-1_POST_/api/blog/login_400_LoginFailed",
              "fullTitle": "UnitTest USER: Controller USR2-1_POST_/api/blog/login_400_LoginFailed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  servicesAPIControllers.login\n);",
              "err": {},
              "uuid": "750917c6-c436-4e4b-a479-d1b7367868c4",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR2-2_POST_/api/blog/login_400_LoginSuccess",
              "fullTitle": "UnitTest USER: Controller USR2-2_POST_/api/blog/login_400_LoginSuccess",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  \nawait GenericController.testError(\n  mock, match,\n  servicesAPIControllers.login\n);",
              "err": {},
              "uuid": "e06c0565-93e2-456b-aa32-5c297a3181c6",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR2-3_POST_/api/blog/login_400_AccountBlocked",
              "fullTitle": "UnitTest USER: Controller USR2-3_POST_/api/blog/login_400_AccountBlocked",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n  \nawait GenericController.testError(\n  mock, match,\n  servicesAPIControllers.login\n);",
              "err": {},
              "uuid": "2cc50894-4c17-400a-a742-88d1a0e23a4c",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR3-1_POST_/api/blog/logout_400_LogoutFaikedNoCookie",
              "fullTitle": "UnitTest USER: Controller USR3-1_POST_/api/blog/logout_400_LogoutFaikedNoCookie",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  servicesAPIControllers.logout\n);",
              "err": {},
              "uuid": "abebf74b-9fb4-4021-85ee-2aa1f13fd1dc",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR3-2_POST_/api/blog/logout_200_LogoutOK",
              "fullTitle": "UnitTest USER: Controller USR3-2_POST_/api/blog/logout_200_LogoutOK",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\n// await GenericController.testSuccess(\n//   mock, match,\n//   servicesAPIControllers.logout\n// );",
              "err": {},
              "uuid": "b1c9c54f-87b3-4cf3-84fa-17ed2704135d",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "USR3-3_POST_/api/blog/logout_200_LogoutNotFound",
              "fullTitle": "UnitTest USER: Controller USR3-3_POST_/api/blog/logout_200_LogoutNotFound",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { mock, match } = currentMockUnitTestData[this.test.title];\nawait GenericController.testError(\n  mock, match,\n  servicesAPIControllers.logout\n);",
              "err": {},
              "uuid": "212ee3f9-babe-4a04-93b6-80e9cb0f9e53",
              "parentUUID": "7b25ca77-8848-488d-b4a5-d2733d76fdfe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9b6cdda-cee6-4253-bcaa-166bc394da01",
            "fe233495-6e53-471a-af36-1cc9425b75b8",
            "af94757d-0c1f-4e37-86c2-99de22bbd8ab",
            "750917c6-c436-4e4b-a479-d1b7367868c4",
            "e06c0565-93e2-456b-aa32-5c297a3181c6",
            "2cc50894-4c17-400a-a742-88d1a0e23a4c",
            "abebf74b-9fb4-4021-85ee-2aa1f13fd1dc",
            "b1c9c54f-87b3-4cf3-84fa-17ed2704135d",
            "212ee3f9-babe-4a04-93b6-80e9cb0f9e53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test_reports"
      },
      "version": "6.2.0"
    }
  }
}